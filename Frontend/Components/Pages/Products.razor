@page "/"
@inject ProductCrudBlazor.Services.ProductService ProductService
@inject ProductCrudBlazor.Services.CartService CartService
@using ProductCrudBlazor.Models
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="crud-card">
    <div class="crud-header d-flex justify-content-between align-items-center">
        <h3 class="mb-0"><i class="bi bi-list"></i> Product List</h3>
        <button class="btn btn-primary crud-btn" @onclick='() => Navigation.NavigateTo("/create-product")'>
            <i class="bi bi-plus-circle"></i> Create New Product
        </button>
    </div>

    <div class="card-body p-4">
        @if (products == null)
        {
            <div class="text-center p-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (products.Count == 0)
        {
            <div class="alert alert-info" role="alert">
                <i class="bi bi-info-circle"></i> No products found.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="crud-table table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Price.ToString("C")</td>
                                <td>@product.Stock</td>
                                <td>
                                    <div class="crud-actions">
                                        <button class="btn btn-info crud-btn" @onclick='() => Navigation.NavigateTo($"/view-product/{product.Id}")'>
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-warning crud-btn" @onclick='() => Navigation.NavigateTo($"/edit-product/{product.Id}")'>
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-danger crud-btn" @onclick='() => DeleteProduct(product.Id)'>
                                            <i class="bi bi-trash"></i>
                                        </button>
                                        <div class="cart-action-group">
                                            <input type="number" 
                                                   min="1" 
                                                   max="@product.Stock" 
                                                   value="@(GetQuantity(product.Id))" 
                                                   class="quantity-input"
                                                   @onchange="@(e => UpdateQuantity(product.Id, e.Value))" />
                                            <button class="btn btn-success crud-btn" @onclick='() => AddToCartWithConfirm(product)'>
                                                <i class="bi bi-cart"></i>
                                            </button>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Product> products;
    private Dictionary<int, int> productQuantities = new();
    
    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
        InitializeQuantities();
    }

    private void InitializeQuantities()
    {
        foreach (var product in products)
        {
            productQuantities[product.Id] = 1;
        }
    }

    private int GetQuantity(int productId)
    {
        return productQuantities.GetValueOrDefault(productId, 1);
    }

    private void UpdateQuantity(int productId, object value)
    {
        if (int.TryParse(value?.ToString(), out int quantity))
        {
            productQuantities[productId] = Math.Max(1, Math.Min(quantity, products.First(p => p.Id == productId).Stock));
        }
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync(); 
    }

    private async Task AddCart(Product product)
    {
        CartService.AddToCart(product,1);
    }

    private async Task AddToCartWithConfirm(Product product)
    {
        var quantity = GetQuantity(product.Id);
        
        
        CartService.AddToCart(product, quantity);

       
        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"{quantity} unit(s) of {product.Name} have been added to your cart.\n\n" +
            "Would you like to go to cart now?");

        if (confirmed)
        {
            Navigation.NavigateTo("/cart");
        }
    }
}

<style>
    .cart-action-group {
        display: flex;
        gap: 5px;
        align-items: center;
    }

    .quantity-input {
        width: 60px;
        height: 38px;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        text-align: center;
    }

    .quantity-input::-webkit-inner-spin-button,
    .quantity-input::-webkit-outer-spin-button {
        opacity: 1;
    }
</style>
