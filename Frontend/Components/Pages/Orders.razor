@page "/orders"
@using ProductCrudBlazor.Models
@using ProductCrudBlazor.Services
@inject OrderService OrderService

<div class="crud-card">
    <div class="crud-header">
        <h3><i class="bi bi-bag"></i> My Orders</h3>
    </div>

    <div class="card-body p-4">
        @if (orders == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!orders.Any())
        {
            <div class="alert alert-info" role="alert">
                <i class="bi bi-info-circle"></i> No orders registered.
            </div>
        }
        else
        {
            <div class="orders-list">
                @foreach (var order in orders)
                {
                    <div class="order-card">
                        <div class="order-header">
                            <h5>Order #@order.Id</h5>
                            <div class="order-info">
                                <span class="order-date">@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</span>
                                <span class="order-status">Status: @order.Status</span>
                            </div>
                        </div>
                        <div class="order-items">
                            @foreach (var item in order.Products)
                            {
                                <div class="order-item">
                                    <span class="item-name">@item.ProductName</span>
                                    <span class="item-quantity">x @item.Quantity</span>
                                    <span class="item-price">@(item.Price * item.Quantity)€</span>
                                </div>
                            }
                        </div>
                        <div class="order-total">
                            <strong>Total:</strong> @order.TotalPrice€
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .orders-list {
        display: grid;
        gap: 1rem;
    }

    .order-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        background-color: white;
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eee;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }

    .order-date {
        color: #666;
        font-size: 0.9rem;
    }

    .order-info {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .order-status {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        background-color: #f8f9fa;
        font-size: 0.9rem;
    }

    .order-items {
        margin: 1rem 0;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .item-name {
        flex: 1;
    }

    .item-quantity {
        margin: 0 1rem;
        color: #666;
    }

    .order-total {
        text-align: right;
        margin-top: 1rem;
        font-size: 1.1rem;
    }
</style>

@code {
    private List<Order>? orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetOrdersAsync();
    }
}