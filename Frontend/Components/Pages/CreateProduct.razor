@page "/create-product"
@using Microsoft.AspNetCore.Components.Forms
@using ProductCrudBlazor.Models
@using ProductCrudBlazor.Services
@inject ProductService ProductService
@inject NavigationManager Navigation

<div class="crud-card">
    <div class="crud-header d-flex justify-content-between align-items-center">
        <h3 class="mb-0"><i class="bi bi-plus-circle"></i> Create Product</h3>
    </div>
    
    <div class="card-body p-4">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
            </div>
        }

        <EditForm Model="@newProduct" OnValidSubmit="HandleCreateProduct">
            <DataAnnotationsValidator />
            
            <div class="form-floating mb-3">
                <InputText @bind-Value="newProduct.Name" class="form-control crud-form-control" id="name" placeholder="Product name" />
                <label for="name">Product Name</label>
                <ValidationMessage For="@(() => newProduct.Name)" />
            </div>

            <div class="form-floating mb-3">
                <InputNumber @bind-Value="newProduct.Price" class="form-control crud-form-control" id="price" placeholder="Price" />
                <label for="price">Price</label>
                <ValidationMessage For="@(() => newProduct.Price)" />
            </div>

            <div class="form-floating mb-4">
                <InputNumber @bind-Value="newProduct.Stock" class="form-control crud-form-control" id="stock" placeholder="Stock" />
                <label for="stock">Stock</label>
                <ValidationMessage For="@(() => newProduct.Stock)" />
            </div>

            <div class="d-flex gap-2 justify-content-end">
                <button class="btn btn-secondary crud-btn" type="button" @onclick="@(() => Navigation.NavigateTo("/"))">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
                <button class="btn btn-primary crud-btn" type="submit">
                    <i class="bi bi-check-circle"></i> Save
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Product newProduct = new Product();
    private string errorMessage;

    private async Task HandleCreateProduct()
    {
        try
        {
            await ProductService.CreateProductAsync(newProduct);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating product: " + ex.Message;
            StateHasChanged();
        }
    }
}